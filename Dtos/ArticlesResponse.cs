using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Text.Json;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RoomBox___DataPortal.Dtos;
//
//    var articlesResponse = ArticlesResponse.FromJson(jsonString);

namespace RoomBox___DataPortal.Dtos
{
    public partial class ArticlesResponse
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("next")]
        public object Next { get; set; }

        [JsonProperty("previous")]
        public object Previous { get; set; }

        [JsonProperty("results")]
        public List<Article> Results { get; set; }
    }

    public partial class Article
    {
        [JsonProperty("article_id")]
        public int ArticleId { get; set; }

        [JsonProperty("image_url")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("client")]
        public object Client { get; set; }

        [JsonProperty("article_name")]
        public string ArticleName { get; set; }

        [JsonProperty("article_description")]
        public string ArticleDescription { get; set; }

        [JsonProperty("article_type")]
        public string ArticleType { get; set; }

        [JsonProperty("article_stock")]
        public int ArticleStock { get; set; }

        [JsonProperty("article_unit_price")]
        public string ArticleUnitPrice { get; set; }

        [JsonProperty("article_status")]
        public bool ArticleStatus { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        public Article Snapshot()
        {
            // Serialize and deserialize to create a deep copy
            var json = JsonConvert.SerializeObject(this);
            return JsonConvert.DeserializeObject<Article>(json)!;
        }


    }
    public static class SerializeArticle
    {
        public static string ToJson(Article article) => JsonConvert.SerializeObject(article, RoomBox___DataPortal.Dtos.Converter.Settings);

    }

    public partial class Article
    {
        public static Article FromJson(string json) => JsonConvert.DeserializeObject<Article>(json, RoomBox___DataPortal.Dtos.Converter.Settings);
    }

    public partial class ArticlesResponse
    {
        public static ArticlesResponse FromJson(string json) => JsonConvert.DeserializeObject<ArticlesResponse>(json, RoomBox___DataPortal.Dtos.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ArticlesResponse self) => JsonConvert.SerializeObject(self, RoomBox___DataPortal.Dtos.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

